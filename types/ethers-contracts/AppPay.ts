/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface AppPayInterface extends utils.Interface {
  functions: {
    "CALLER_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MANAGER_ROLE()": FunctionFragment;
    "UPGRADE_INTERFACE_VERSION()": FunctionFragment;
    "addClientID(uint256)": FunctionFragment;
    "delClientID(uint256)": FunctionFragment;
    "feeInfo(uint256)": FunctionFragment;
    "getClientIDList()": FunctionFragment;
    "getClientIDListNumber()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isInClientIDList(uint256)": FunctionFragment;
    "paused()": FunctionFragment;
    "pay(uint256,uint256,uint256,address,address)": FunctionFragment;
    "payCancel(uint256,uint256)": FunctionFragment;
    "payInfo(uint256,uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setFeeInfo(uint256,address,uint256,uint256)": FunctionFragment;
    "settlement(uint256,uint256,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CALLER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MANAGER_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "addClientID"
      | "delClientID"
      | "feeInfo"
      | "getClientIDList"
      | "getClientIDListNumber"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isInClientIDList"
      | "paused"
      | "pay"
      | "payCancel"
      | "payInfo"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "setFeeInfo"
      | "settlement"
      | "supportsInterface"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CALLER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addClientID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delClientID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClientIDList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClientIDListNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInClientIDList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "payCancel",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeInfo",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlement",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CALLER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addClientID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delClientID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClientIDList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClientIDListNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInClientIDList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payCancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settlement", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "ADDClientID(uint256)": EventFragment;
    "DELClientID(uint256)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "Paused(address)": EventFragment;
    "Pay(uint256,uint256,address,uint256,uint256,address,address,uint8)": EventFragment;
    "PayCancel(uint256,uint256,address,address,address,uint256,uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Settlement(uint256,uint256,address,address,address,uint256,uint256,uint256,uint8)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ADDClientID"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DELClientID"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayCancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settlement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface ADDClientIDEventObject {
  _clientID: BigNumber;
}
export type ADDClientIDEvent = TypedEvent<[BigNumber], ADDClientIDEventObject>;

export type ADDClientIDEventFilter = TypedEventFilter<ADDClientIDEvent>;

export interface DELClientIDEventObject {
  _clientID: BigNumber;
}
export type DELClientIDEvent = TypedEvent<[BigNumber], DELClientIDEventObject>;

export type DELClientIDEventFilter = TypedEventFilter<DELClientIDEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PayEventObject {
  _clientID: BigNumber;
  _payID: BigNumber;
  _BobAddress: string;
  _payTime: BigNumber;
  _payAmount: BigNumber;
  _aliceAddress: string;
  _payToken: string;
  _payStatus: number;
}
export type PayEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, string, string, number],
  PayEventObject
>;

export type PayEventFilter = TypedEventFilter<PayEvent>;

export interface PayCancelEventObject {
  _clientID: BigNumber;
  _payID: BigNumber;
  _BobAddress: string;
  _aliceAddress: string;
  _payToken: string;
  _payAmount: BigNumber;
  _payStatus: number;
}
export type PayCancelEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, string, BigNumber, number],
  PayCancelEventObject
>;

export type PayCancelEventFilter = TypedEventFilter<PayCancelEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SettlementEventObject {
  _clientID: BigNumber;
  _payID: BigNumber;
  _BobAddress: string;
  _aliceAddress: string;
  _payToken: string;
  _payAmount: BigNumber;
  _starTime: BigNumber;
  _endTime: BigNumber;
  _payStatus: number;
}
export type SettlementEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ],
  SettlementEventObject
>;

export type SettlementEventFilter = TypedEventFilter<SettlementEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface AppPay extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AppPayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CALLER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    addClientID(
      _clientID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delClientID(
      _clientID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    feeInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        feeRate: BigNumber;
        feeTo: string;
        cancelTimeLen: BigNumber;
      }
    >;

    getClientIDList(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getClientIDListNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isInClientIDList(
      _clientID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pay(
      _clientID: BigNumberish,
      _payID: BigNumberish,
      _payAmount: BigNumberish,
      _aliceAddress: string,
      _payToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    payCancel(
      _clientID: BigNumberish,
      _payID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    payInfo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string
      ] & {
        payID: BigNumber;
        payAmount: BigNumber;
        payTime: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        paySts: number;
        bobAddress: string;
        aliceAddress: string;
        payToken: string;
      }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeInfo(
      _clientID: BigNumberish,
      _feeTo: string,
      _feeRate: BigNumberish,
      _cancelTimeLen: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    settlement(
      _clientID: BigNumberish,
      _payID: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  CALLER_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

  addClientID(
    _clientID: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delClientID(
    _clientID: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  feeInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      feeRate: BigNumber;
      feeTo: string;
      cancelTimeLen: BigNumber;
    }
  >;

  getClientIDList(overrides?: CallOverrides): Promise<BigNumber[]>;

  getClientIDListNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isInClientIDList(
    _clientID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pay(
    _clientID: BigNumberish,
    _payID: BigNumberish,
    _payAmount: BigNumberish,
    _aliceAddress: string,
    _payToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  payCancel(
    _clientID: BigNumberish,
    _payID: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  payInfo(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      string,
      string,
      string
    ] & {
      payID: BigNumber;
      payAmount: BigNumber;
      payTime: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      paySts: number;
      bobAddress: string;
      aliceAddress: string;
      payToken: string;
    }
  >;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    callerConfirmation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeInfo(
    _clientID: BigNumberish,
    _feeTo: string,
    _feeRate: BigNumberish,
    _cancelTimeLen: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  settlement(
    _clientID: BigNumberish,
    _payID: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    CALLER_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

    addClientID(
      _clientID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delClientID(
      _clientID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        feeRate: BigNumber;
        feeTo: string;
        cancelTimeLen: BigNumber;
      }
    >;

    getClientIDList(overrides?: CallOverrides): Promise<BigNumber[]>;

    getClientIDListNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isInClientIDList(
      _clientID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pay(
      _clientID: BigNumberish,
      _payID: BigNumberish,
      _payAmount: BigNumberish,
      _aliceAddress: string,
      _payToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    payCancel(
      _clientID: BigNumberish,
      _payID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    payInfo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string
      ] & {
        payID: BigNumber;
        payAmount: BigNumber;
        payTime: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        paySts: number;
        bobAddress: string;
        aliceAddress: string;
        payToken: string;
      }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeInfo(
      _clientID: BigNumberish,
      _feeTo: string,
      _feeRate: BigNumberish,
      _cancelTimeLen: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settlement(
      _clientID: BigNumberish,
      _payID: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ADDClientID(uint256)"(
      _clientID?: BigNumberish | null
    ): ADDClientIDEventFilter;
    ADDClientID(_clientID?: BigNumberish | null): ADDClientIDEventFilter;

    "DELClientID(uint256)"(
      _clientID?: BigNumberish | null
    ): DELClientIDEventFilter;
    DELClientID(_clientID?: BigNumberish | null): DELClientIDEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Pay(uint256,uint256,address,uint256,uint256,address,address,uint8)"(
      _clientID?: BigNumberish | null,
      _payID?: BigNumberish | null,
      _BobAddress?: null,
      _payTime?: null,
      _payAmount?: null,
      _aliceAddress?: null,
      _payToken?: null,
      _payStatus?: null
    ): PayEventFilter;
    Pay(
      _clientID?: BigNumberish | null,
      _payID?: BigNumberish | null,
      _BobAddress?: null,
      _payTime?: null,
      _payAmount?: null,
      _aliceAddress?: null,
      _payToken?: null,
      _payStatus?: null
    ): PayEventFilter;

    "PayCancel(uint256,uint256,address,address,address,uint256,uint8)"(
      _clientID?: BigNumberish | null,
      _payID?: BigNumberish | null,
      _BobAddress?: null,
      _aliceAddress?: null,
      _payToken?: null,
      _payAmount?: null,
      _payStatus?: null
    ): PayCancelEventFilter;
    PayCancel(
      _clientID?: BigNumberish | null,
      _payID?: BigNumberish | null,
      _BobAddress?: null,
      _aliceAddress?: null,
      _payToken?: null,
      _payAmount?: null,
      _payStatus?: null
    ): PayCancelEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Settlement(uint256,uint256,address,address,address,uint256,uint256,uint256,uint8)"(
      _clientID?: BigNumberish | null,
      _payID?: BigNumberish | null,
      _BobAddress?: null,
      _aliceAddress?: null,
      _payToken?: null,
      _payAmount?: null,
      _starTime?: null,
      _endTime?: null,
      _payStatus?: null
    ): SettlementEventFilter;
    Settlement(
      _clientID?: BigNumberish | null,
      _payID?: BigNumberish | null,
      _BobAddress?: null,
      _aliceAddress?: null,
      _payToken?: null,
      _payAmount?: null,
      _starTime?: null,
      _endTime?: null,
      _payStatus?: null
    ): SettlementEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    CALLER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addClientID(
      _clientID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delClientID(
      _clientID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    feeInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getClientIDList(overrides?: CallOverrides): Promise<BigNumber>;

    getClientIDListNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    isInClientIDList(
      _clientID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pay(
      _clientID: BigNumberish,
      _payID: BigNumberish,
      _payAmount: BigNumberish,
      _aliceAddress: string,
      _payToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    payCancel(
      _clientID: BigNumberish,
      _payID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    payInfo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeInfo(
      _clientID: BigNumberish,
      _feeTo: string,
      _feeRate: BigNumberish,
      _cancelTimeLen: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    settlement(
      _clientID: BigNumberish,
      _payID: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CALLER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPGRADE_INTERFACE_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addClientID(
      _clientID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delClientID(
      _clientID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    feeInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClientIDList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClientIDListNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isInClientIDList(
      _clientID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pay(
      _clientID: BigNumberish,
      _payID: BigNumberish,
      _payAmount: BigNumberish,
      _aliceAddress: string,
      _payToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    payCancel(
      _clientID: BigNumberish,
      _payID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    payInfo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeInfo(
      _clientID: BigNumberish,
      _feeTo: string,
      _feeRate: BigNumberish,
      _cancelTimeLen: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    settlement(
      _clientID: BigNumberish,
      _payID: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
