/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace PolicyManager {
  export type PolicyStruct = {
    sponsor: string;
    startTimestamp: BigNumberish;
    endTimestamp: BigNumberish;
    size: BigNumberish;
    owner: string;
  };

  export type PolicyStructOutput = [string, number, number, number, string] & {
    sponsor: string;
    startTimestamp: number;
    endTimestamp: number;
    size: number;
    owner: string;
  };
}

export interface SubscriptionManagerInterface extends utils.Interface {
  functions: {
    "ChainID()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "SET_RATE_ROLE()": FunctionFragment;
    "WITHDRAW_ROLE()": FunctionFragment;
    "addrCtrl()": FunctionFragment;
    "checkChainID(uint256)": FunctionFragment;
    "createPolicy(bytes,address,uint16,uint32,uint32)": FunctionFragment;
    "createPolicyCross(bytes,address,uint256,bytes32,bytes)": FunctionFragment;
    "createPolicyMulti(bytes[],address[],uint16[],uint32[],uint32[])": FunctionFragment;
    "feeRate()": FunctionFragment;
    "feeTo()": FunctionFragment;
    "feeToken()": FunctionFragment;
    "getPolicy(bytes)": FunctionFragment;
    "getPolicyCost(uint16,uint32,uint32)": FunctionFragment;
    "getPolicyCostMulti(uint16[],uint32[],uint32[])": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,uint256,address,address,uint256)": FunctionFragment;
    "isPolicyActive(bytes)": FunctionFragment;
    "nlk()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setFeeRate(uint256)": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "setFeeToken(address)": FunctionFragment;
    "setNLK(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "sweep(address)": FunctionFragment;
    "testCount()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ChainID"
      | "DEFAULT_ADMIN_ROLE"
      | "SET_RATE_ROLE"
      | "WITHDRAW_ROLE"
      | "addrCtrl"
      | "checkChainID"
      | "createPolicy"
      | "createPolicyCross"
      | "createPolicyMulti"
      | "feeRate"
      | "feeTo"
      | "feeToken"
      | "getPolicy"
      | "getPolicyCost"
      | "getPolicyCostMulti"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isPolicyActive"
      | "nlk"
      | "renounceRole"
      | "revokeRole"
      | "setFeeRate"
      | "setFeeTo"
      | "setFeeToken"
      | "setNLK"
      | "supportsInterface"
      | "sweep"
      | "testCount"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ChainID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_RATE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAW_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addrCtrl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkChainID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicy",
    values: [BytesLike, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicyCross",
    values: [BytesLike, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicyMulti",
    values: [
      BytesLike[],
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "feeRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPolicy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyCost",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyCostMulti",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPolicyActive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "nlk", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
  encodeFunctionData(functionFragment: "setFeeToken", values: [string]): string;
  encodeFunctionData(functionFragment: "setNLK", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "sweep", values: [string]): string;
  encodeFunctionData(functionFragment: "testCount", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ChainID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_RATE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAW_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addrCtrl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkChainID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPolicyCross",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPolicyMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPolicy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyCostMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPolicyActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nlk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNLK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCount", data: BytesLike): Result;

  events: {
    "CreatePolicyCross(bytes,address,uint256,bytes32,bytes)": EventFragment;
    "FeeRateUpdated(uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "PolicyCreated(bytes,uint256,address,address,uint16,uint32,uint32,address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatePolicyCross"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface CreatePolicyCrossEventObject {
  _policyId: string;
  _policyOwner: string;
  _chainID: BigNumber;
  _txHahs: string;
  _crossBytes: string;
}
export type CreatePolicyCrossEvent = TypedEvent<
  [string, string, BigNumber, string, string],
  CreatePolicyCrossEventObject
>;

export type CreatePolicyCrossEventFilter =
  TypedEventFilter<CreatePolicyCrossEvent>;

export interface FeeRateUpdatedEventObject {
  oldFeeRate: BigNumber;
  newFeeRate: BigNumber;
}
export type FeeRateUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FeeRateUpdatedEventObject
>;

export type FeeRateUpdatedEventFilter = TypedEventFilter<FeeRateUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PolicyCreatedEventObject {
  policyId: string;
  chainId: BigNumber;
  sponsor: string;
  owner: string;
  size: number;
  startTimestamp: number;
  endTimestamp: number;
  tokenAddr: string;
  cost: BigNumber;
}
export type PolicyCreatedEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    number,
    number,
    number,
    string,
    BigNumber
  ],
  PolicyCreatedEventObject
>;

export type PolicyCreatedEventFilter = TypedEventFilter<PolicyCreatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SubscriptionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubscriptionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ChainID(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SET_RATE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    WITHDRAW_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addrCtrl(overrides?: CallOverrides): Promise<[string]>;

    checkChainID(
      _chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createPolicy(
      _policyId: BytesLike,
      _policyOwner: string,
      _size: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    createPolicyCross(
      _policyId: BytesLike,
      _policyOwner: string,
      _chainID: BigNumberish,
      _txHash: BytesLike,
      _crossBytes: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createPolicyMulti(
      _policyId: BytesLike[],
      _policyOwner: string[],
      _size: BigNumberish[],
      _startTimestamp: BigNumberish[],
      _endTimestamp: BigNumberish[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    feeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    feeToken(overrides?: CallOverrides): Promise<[string]>;

    getPolicy(
      _policyID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[PolicyManager.PolicyStructOutput]>;

    getPolicyCost(
      _size: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPolicyCostMulti(
      _size: BigNumberish[],
      _startTimestamp: BigNumberish[],
      _endTimestamp: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber] & { totalFee: BigNumber }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _addrCtrl: string,
      _feeRate: BigNumberish,
      _nlk: string,
      _feeTo: string,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isPolicyActive(
      _policyID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nlk(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeRate(
      _ratePerSecond: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeToken(
      _feeToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setNLK(
      _nlk: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    sweep(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ChainID(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  SET_RATE_ROLE(overrides?: CallOverrides): Promise<string>;

  WITHDRAW_ROLE(overrides?: CallOverrides): Promise<string>;

  addrCtrl(overrides?: CallOverrides): Promise<string>;

  checkChainID(
    _chainID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createPolicy(
    _policyId: BytesLike,
    _policyOwner: string,
    _size: BigNumberish,
    _startTimestamp: BigNumberish,
    _endTimestamp: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  createPolicyCross(
    _policyId: BytesLike,
    _policyOwner: string,
    _chainID: BigNumberish,
    _txHash: BytesLike,
    _crossBytes: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createPolicyMulti(
    _policyId: BytesLike[],
    _policyOwner: string[],
    _size: BigNumberish[],
    _startTimestamp: BigNumberish[],
    _endTimestamp: BigNumberish[],
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  feeRate(overrides?: CallOverrides): Promise<BigNumber>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  feeToken(overrides?: CallOverrides): Promise<string>;

  getPolicy(
    _policyID: BytesLike,
    overrides?: CallOverrides
  ): Promise<PolicyManager.PolicyStructOutput>;

  getPolicyCost(
    _size: BigNumberish,
    _startTimestamp: BigNumberish,
    _endTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPolicyCostMulti(
    _size: BigNumberish[],
    _startTimestamp: BigNumberish[],
    _endTimestamp: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber] & { totalFee: BigNumber }>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _addrCtrl: string,
    _feeRate: BigNumberish,
    _nlk: string,
    _feeTo: string,
    _chainId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isPolicyActive(
    _policyID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nlk(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeRate(
    _ratePerSecond: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeTo(
    _feeTo: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeToken(
    _feeToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setNLK(
    _nlk: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  sweep(
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ChainID(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    SET_RATE_ROLE(overrides?: CallOverrides): Promise<string>;

    WITHDRAW_ROLE(overrides?: CallOverrides): Promise<string>;

    addrCtrl(overrides?: CallOverrides): Promise<string>;

    checkChainID(
      _chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createPolicy(
      _policyId: BytesLike,
      _policyOwner: string,
      _size: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createPolicyCross(
      _policyId: BytesLike,
      _policyOwner: string,
      _chainID: BigNumberish,
      _txHash: BytesLike,
      _crossBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createPolicyMulti(
      _policyId: BytesLike[],
      _policyOwner: string[],
      _size: BigNumberish[],
      _startTimestamp: BigNumberish[],
      _endTimestamp: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    feeRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    feeToken(overrides?: CallOverrides): Promise<string>;

    getPolicy(
      _policyID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PolicyManager.PolicyStructOutput>;

    getPolicyCost(
      _size: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicyCostMulti(
      _size: BigNumberish[],
      _startTimestamp: BigNumberish[],
      _endTimestamp: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber] & { totalFee: BigNumber }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _addrCtrl: string,
      _feeRate: BigNumberish,
      _nlk: string,
      _feeTo: string,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isPolicyActive(
      _policyID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nlk(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRate(
      _ratePerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>;

    setFeeToken(_feeToken: string, overrides?: CallOverrides): Promise<void>;

    setNLK(_nlk: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sweep(recipient: string, overrides?: CallOverrides): Promise<void>;

    testCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "CreatePolicyCross(bytes,address,uint256,bytes32,bytes)"(
      _policyId?: null,
      _policyOwner?: null,
      _chainID?: null,
      _txHahs?: null,
      _crossBytes?: null
    ): CreatePolicyCrossEventFilter;
    CreatePolicyCross(
      _policyId?: null,
      _policyOwner?: null,
      _chainID?: null,
      _txHahs?: null,
      _crossBytes?: null
    ): CreatePolicyCrossEventFilter;

    "FeeRateUpdated(uint256,uint256)"(
      oldFeeRate?: null,
      newFeeRate?: null
    ): FeeRateUpdatedEventFilter;
    FeeRateUpdated(
      oldFeeRate?: null,
      newFeeRate?: null
    ): FeeRateUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "PolicyCreated(bytes,uint256,address,address,uint16,uint32,uint32,address,uint256)"(
      policyId?: null,
      chainId?: null,
      sponsor?: string | null,
      owner?: string | null,
      size?: null,
      startTimestamp?: null,
      endTimestamp?: null,
      tokenAddr?: null,
      cost?: null
    ): PolicyCreatedEventFilter;
    PolicyCreated(
      policyId?: null,
      chainId?: null,
      sponsor?: string | null,
      owner?: string | null,
      size?: null,
      startTimestamp?: null,
      endTimestamp?: null,
      tokenAddr?: null,
      cost?: null
    ): PolicyCreatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    ChainID(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SET_RATE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAW_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addrCtrl(overrides?: CallOverrides): Promise<BigNumber>;

    checkChainID(
      _chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPolicy(
      _policyId: BytesLike,
      _policyOwner: string,
      _size: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    createPolicyCross(
      _policyId: BytesLike,
      _policyOwner: string,
      _chainID: BigNumberish,
      _txHash: BytesLike,
      _crossBytes: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createPolicyMulti(
      _policyId: BytesLike[],
      _policyOwner: string[],
      _size: BigNumberish[],
      _startTimestamp: BigNumberish[],
      _endTimestamp: BigNumberish[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    feeRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<BigNumber>;

    getPolicy(
      _policyID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicyCost(
      _size: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicyCostMulti(
      _size: BigNumberish[],
      _startTimestamp: BigNumberish[],
      _endTimestamp: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _addrCtrl: string,
      _feeRate: BigNumberish,
      _nlk: string,
      _feeTo: string,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isPolicyActive(
      _policyID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nlk(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeRate(
      _ratePerSecond: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeToken(
      _feeToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setNLK(
      _nlk: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sweep(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ChainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SET_RATE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WITHDRAW_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addrCtrl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkChainID(
      _chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPolicy(
      _policyId: BytesLike,
      _policyOwner: string,
      _size: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createPolicyCross(
      _policyId: BytesLike,
      _policyOwner: string,
      _chainID: BigNumberish,
      _txHash: BytesLike,
      _crossBytes: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createPolicyMulti(
      _policyId: BytesLike[],
      _policyOwner: string[],
      _size: BigNumberish[],
      _startTimestamp: BigNumberish[],
      _endTimestamp: BigNumberish[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    feeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPolicy(
      _policyID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolicyCost(
      _size: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolicyCostMulti(
      _size: BigNumberish[],
      _startTimestamp: BigNumberish[],
      _endTimestamp: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _addrCtrl: string,
      _feeRate: BigNumberish,
      _nlk: string,
      _feeTo: string,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isPolicyActive(
      _policyID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nlk(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeRate(
      _ratePerSecond: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeToken(
      _feeToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setNLK(
      _nlk: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sweep(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
